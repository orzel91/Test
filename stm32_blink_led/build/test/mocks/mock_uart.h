/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_UART_H
#define _MOCK_UART_H

#include "uart.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_uart_Init(void);
void mock_uart_Destroy(void);
void mock_uart_Verify(void);


typedef void(*cmock_uart_func_ptr1)(char* pBuf);


#define UART_init_Ignore() UART_init_CMockIgnore()
void UART_init_CMockIgnore(void);
#define UART_init_Expect(baudrate) UART_init_CMockExpect(__LINE__, baudrate)
void UART_init_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t baudrate);
typedef void (* CMOCK_UART_init_CALLBACK)(uint32_t baudrate, int cmock_num_calls);
void UART_init_StubWithCallback(CMOCK_UART_init_CALLBACK Callback);
#define UART_getChr_IgnoreAndReturn(cmock_retval) UART_getChr_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void UART_getChr_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define UART_getChr_ExpectAndReturn(cmock_retval) UART_getChr_CMockExpectAndReturn(__LINE__, cmock_retval)
void UART_getChr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_UART_getChr_CALLBACK)(int cmock_num_calls);
void UART_getChr_StubWithCallback(CMOCK_UART_getChr_CALLBACK Callback);
#define UART_putStr_Ignore() UART_putStr_CMockIgnore()
void UART_putStr_CMockIgnore(void);
#define UART_putStr_Expect(s) UART_putStr_CMockExpect(__LINE__, s)
void UART_putStr_CMockExpect(UNITY_LINE_TYPE cmock_line, char* s);
typedef void (* CMOCK_UART_putStr_CALLBACK)(char* s, int cmock_num_calls);
void UART_putStr_StubWithCallback(CMOCK_UART_putStr_CALLBACK Callback);
#define UART_putInt_Ignore() UART_putInt_CMockIgnore()
void UART_putInt_CMockIgnore(void);
#define UART_putInt_Expect(value, radix) UART_putInt_CMockExpect(__LINE__, value, radix)
void UART_putInt_CMockExpect(UNITY_LINE_TYPE cmock_line, int value, int radix);
typedef void (* CMOCK_UART_putInt_CALLBACK)(int value, int radix, int cmock_num_calls);
void UART_putInt_StubWithCallback(CMOCK_UART_putInt_CALLBACK Callback);
#define UART_getStr_IgnoreAndReturn(cmock_retval) UART_getStr_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void UART_getStr_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
#define UART_getStr_ExpectAndReturn(buf, cmock_retval) UART_getStr_CMockExpectAndReturn(__LINE__, buf, cmock_retval)
void UART_getStr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* buf, char* cmock_to_return);
typedef char* (* CMOCK_UART_getStr_CALLBACK)(char* buf, int cmock_num_calls);
void UART_getStr_StubWithCallback(CMOCK_UART_getStr_CALLBACK Callback);
#define UART_RX_STR_EVENT_Ignore() UART_RX_STR_EVENT_CMockIgnore()
void UART_RX_STR_EVENT_CMockIgnore(void);
#define UART_RX_STR_EVENT_Expect() UART_RX_STR_EVENT_CMockExpect(__LINE__)
void UART_RX_STR_EVENT_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_UART_RX_STR_EVENT_CALLBACK)(int cmock_num_calls);
void UART_RX_STR_EVENT_StubWithCallback(CMOCK_UART_RX_STR_EVENT_CALLBACK Callback);
#define register_uart_str_rx_event_callback_Ignore() register_uart_str_rx_event_callback_CMockIgnore()
void register_uart_str_rx_event_callback_CMockIgnore(void);
#define register_uart_str_rx_event_callback_Expect(callback) register_uart_str_rx_event_callback_CMockExpect(__LINE__, callback)
void register_uart_str_rx_event_callback_CMockExpect(UNITY_LINE_TYPE cmock_line, cmock_uart_func_ptr1 callback);
typedef void (* CMOCK_register_uart_str_rx_event_callback_CALLBACK)(cmock_uart_func_ptr1 callback, int cmock_num_calls);
void register_uart_str_rx_event_callback_StubWithCallback(CMOCK_register_uart_str_rx_event_callback_CALLBACK Callback);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
